;;;; Created on 2011-06-10 20:07:29
(in-package :todotree-model)
(defmethod get-unsorted-tasks ((user-id integer))
  (fetch 'task :all :conditions (LIST :user-id user-id :tab-id 0 :parent-task-id 0)))
(defmethod get-unsorted-tasks ((nothing null))
  (fetch 'task :all :conditions (LIST :user-id 0 :tab-id 0 :parent-task-id 0)))
(defmethod get-tab-tasks ((tab tab))
 (let ((type (tab-type tab)))
   (if (eql type :custom)
       (filter-tasks* (tab-date tab) (tab-user-id tab) :tags nil :segment "day")
       (filter-tasks type (tab-user-id tab)))))
(defmethod instance-refreshed ((tab tab))
  (setf (tab-tasks tab)  (get-tab-tasks tab)))
(defmethod get-tabs ((nothing null))
  (fetch 'tab :all :conditions (list :user-id 0)))
(defmethod get-tabs ((user-id integer))
  (fetch 'tab :all :conditions (list :user-id user-id)))
(defun create-tab (name type user-id &optional date)
  (let ((type (find-symbol (string-upcase type) :keyword)))
    (if (eql :custom type)
        (add-tab name type user-id :date (or date (clsql:get-date)))
        (when (find type (list :today :tomorrow :week :next-week :month :next-month)) 
            (add-tab name type user-id :date (second (multiple-value-list (get-period-dates type))))))))
(defmethod add-tab-task ((tab tab) name &key user-id priority description started active date-due color)
  (add-task name (or user-id (tab-user-id tab)) priority description started active (or date-due (get-tab-date tab) (clsql:get-time)) nil (id tab) color))
(defmethod add-tab-task ((tab-id integer) name &key user-id priority description started active date-due color)
  (add-task name user-id priority description started active (or date-due (clsql:get-time)) nil tab-id color))
(defmethod get-tab-date ((tab tab))
  (let ((type (tab-type tab)))
    (if (eql type :custom)
        (tab-date tab)
        (second (multiple-value-list (get-period-dates type))))))